<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="$(ProjectDir)\CodeGeneration\MultipleOutputHelper.ttinclude" #>
<#@ output extension=".txt" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(ProjectDir)\bin\hosting.dll"#>
<#@ assembly name="$(ProjectDir)\bin\Voodoo.dll"#>
<#

var walker = new Hosting.CodeGeneration.CodeWalker();
var manager = Manager.Create(Host, GenerationEnvironment);

foreach (var resource in walker.Resources)
{
var name = firstLetterLower(resource.Name);	
	manager.StartNewFile(name + "Factory.js"); 
	
#>

	app.factory('<#=name #>Factory', ['$http', function($http) {

    var urlBase = '/api/<#= name #>';
    var <#= name #>Factory = {};

		<# foreach(var verb in resource.Verbs) {#>

		<#= name #>Factory.<#=verb.Name.ToLower()#> = function (request,callback) {
        var operation= $http({method: '<#=verb.Name.ToUpper()#>', url: urlBase, params: request  });
		return operation.then(function(data, status, headers, config) {
            callback(data.Data);
        }, function(data, status, headers, config) {
            
            callback( { IsOk: false, Message: status });
        });
		
    };

		

<#}#>
	return <#= name #>Factory;
}]);

<#
manager.EndBlock(); 	
}
    

manager.Process(true);
#>
<#+
string firstLetterLower(string value)
{
return char.ToLower(value[0]).ToString() + value.Substring(1);
}
#>
